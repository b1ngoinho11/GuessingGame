definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GuessResponse:
    properties:
      message:
        type: string
    type: object
  models.LoginResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /guess/{guess}:
    post:
      description: User guesses a hidden number. If correct, regenerates a new number.
      parameters:
      - description: Guess value
        in: path
        name: guess
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Incorrect guess, try again.
          schema:
            $ref: '#/definitions/models.GuessResponse'
        "201":
          description: Correct guess! New number generated.
          schema:
            $ref: '#/definitions/models.GuessResponse'
        "400":
          description: Invalid guess
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Guess a number
      tags:
      - game
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and sets a token in the cookie
      parameters:
      - description: User request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create User
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update User
      tags:
      - users
swagger: "2.0"
